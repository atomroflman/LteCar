// <auto-generated />
using System;
using LteCar.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LteCar.Server.Migrations
{
    [DbContext(typeof(LteCarContext))]
    [Migration("20250513172130_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("LteCar.Server.Data.SetupFilterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SetupFilterType");
                });

            modelBuilder.Entity("LteCar.Server.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionToken")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActiveVehicleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("CalibrationMax")
                        .HasColumnType("REAL");

                    b.Property<float>("CalibrationMin")
                        .HasColumnType("REAL");

                    b.Property<int>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAxis")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserSetupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserSetupId");

                    b.ToTable("UserSetupChannel");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Paramerters")
                        .HasColumnType("TEXT");

                    b.Property<int>("SetupFilterTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserSetupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SetupFilterTypeId");

                    b.HasIndex("UserSetupId");

                    b.ToTable("UserSetupFilter");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChannelSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FilterSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FilterTargetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserSetupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VehicleFunctionTargetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChannelSourceId");

                    b.HasIndex("FilterSourceId");

                    b.HasIndex("FilterTargetId");

                    b.HasIndex("UserSetupId");

                    b.HasIndex("VehicleFunctionTargetId");

                    b.ToTable("UserSetupLink");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserVehicleSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("UserVehicleSetup");
                });

            modelBuilder.Entity("LteCar.Server.Data.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("CarSecret")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("SeesionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("LteCar.Server.Data.VehicleFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresAxis")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleFunctions");
                });

            modelBuilder.Entity("LteCar.Server.Data.User", b =>
                {
                    b.HasOne("LteCar.Server.Data.Vehicle", "ActiveVehicle")
                        .WithMany()
                        .HasForeignKey("ActiveVehicleId");

                    b.Navigation("ActiveVehicle");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupChannel", b =>
                {
                    b.HasOne("LteCar.Server.Data.UserVehicleSetup", "UserSetup")
                        .WithMany("UserSetupChannels")
                        .HasForeignKey("UserSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSetup");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupFilter", b =>
                {
                    b.HasOne("LteCar.Server.Data.SetupFilterType", "SetupFilterType")
                        .WithMany()
                        .HasForeignKey("SetupFilterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.UserVehicleSetup", "UserSetup")
                        .WithMany("UserSetupFilters")
                        .HasForeignKey("UserSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SetupFilterType");

                    b.Navigation("UserSetup");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupLink", b =>
                {
                    b.HasOne("LteCar.Server.Data.UserSetupChannel", "ChannelSource")
                        .WithMany()
                        .HasForeignKey("ChannelSourceId");

                    b.HasOne("LteCar.Server.Data.UserSetupFilter", "FilterSource")
                        .WithMany()
                        .HasForeignKey("FilterSourceId");

                    b.HasOne("LteCar.Server.Data.UserSetupFilter", "FilterTarget")
                        .WithMany()
                        .HasForeignKey("FilterTargetId");

                    b.HasOne("LteCar.Server.Data.UserVehicleSetup", "UserSetup")
                        .WithMany("UserSetupLinks")
                        .HasForeignKey("UserSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.VehicleFunction", "VehicleFunctionTarget")
                        .WithMany()
                        .HasForeignKey("VehicleFunctionTargetId");

                    b.Navigation("ChannelSource");

                    b.Navigation("FilterSource");

                    b.Navigation("FilterTarget");

                    b.Navigation("UserSetup");

                    b.Navigation("VehicleFunctionTarget");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserVehicleSetup", b =>
                {
                    b.HasOne("LteCar.Server.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("LteCar.Server.Data.VehicleFunction", b =>
                {
                    b.HasOne("LteCar.Server.Data.Vehicle", "Vehicle")
                        .WithMany("Functions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserVehicleSetup", b =>
                {
                    b.Navigation("UserSetupChannels");

                    b.Navigation("UserSetupFilters");

                    b.Navigation("UserSetupLinks");
                });

            modelBuilder.Entity("LteCar.Server.Data.Vehicle", b =>
                {
                    b.Navigation("Functions");
                });
#pragma warning restore 612, 618
        }
    }
}
