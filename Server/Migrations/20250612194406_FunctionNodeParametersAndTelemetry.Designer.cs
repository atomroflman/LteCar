// <auto-generated />
using System;
using LteCar.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LteCar.Server.Migrations
{
    [DbContext(typeof(LteCarContext))]
    [Migration("20250612194406_FunctionNodeParametersAndTelemetry")]
    partial class FunctionNodeParametersAndTelemetry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("LteCar.Server.Data.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChannelMapHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("VideoStreamPort")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("LteCar.Server.Data.CarChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresAxis")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarChannels");
                });

            modelBuilder.Entity("LteCar.Server.Data.CarTelemetry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReadIntervalTicks")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelemetryType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("CarTelemetry");
                });

            modelBuilder.Entity("LteCar.Server.Data.SetupFilterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SetupFilterTypes");
                });

            modelBuilder.Entity("LteCar.Server.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActiveVehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionToken")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ActiveVehicleId");

                    b.HasIndex("SessionToken")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserCarSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarSecret")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSetups");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Accuracy")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("CalibrationMax")
                        .HasColumnType("REAL");

                    b.Property<float?>("CalibrationMin")
                        .HasColumnType("REAL");

                    b.Property<int>("ChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAxis")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserChannelDeviceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserChannelDeviceId", "IsAxis", "ChannelId")
                        .IsUnique();

                    b.ToTable("UserChannel");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserChannelDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "DeviceName")
                        .IsUnique();

                    b.ToTable("UserChannelDevice");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupFlowNodeBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<float>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<float>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<int>("UserSetupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserSetupFlowNodes", (string)null);

                    b.HasDiscriminator<string>("NodeType").HasValue("UserSetupFlowNodeBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupFunctionNodeParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterValue")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserSetupFunctionNodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("UserSetupFunctionNodeId", "ParameterName")
                        .IsUnique();

                    b.ToTable("UserSetupFunctionNodeParameter");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourcePort")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetPort")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserSetupFromNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserSetupToNodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserSetupFromNodeId");

                    b.HasIndex("UserSetupToNodeId");

                    b.ToTable("UserSetupLink");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupTelemetry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarTelemetryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OverrideTicks")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserSetupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarTelemetryId");

                    b.HasIndex("UserSetupId");

                    b.ToTable("UserSetupTelemetries");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupCarChannelNode", b =>
                {
                    b.HasBaseType("LteCar.Server.Data.UserSetupFlowNodeBase");

                    b.Property<int>("CarChannelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CarChannelId");

                    b.HasIndex("UserSetupId");

                    b.HasDiscriminator().HasValue("C");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupFunctionNode", b =>
                {
                    b.HasBaseType("LteCar.Server.Data.UserSetupFlowNodeBase");

                    b.Property<string>("SetupFunctionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasIndex("UserSetupId");

                    b.HasDiscriminator().HasValue("F");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupTelemetryNode", b =>
                {
                    b.HasBaseType("LteCar.Server.Data.UserSetupFlowNodeBase");

                    b.Property<int>("TelemetryId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("TelemetryId");

                    b.HasIndex("UserSetupId");

                    b.HasDiscriminator().HasValue("UserSetupTelemetryNode");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupUserChannelNode", b =>
                {
                    b.HasBaseType("LteCar.Server.Data.UserSetupFlowNodeBase");

                    b.Property<int>("UserChannelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("UserChannelId");

                    b.HasIndex("UserSetupId");

                    b.HasDiscriminator().HasValue("U");
                });

            modelBuilder.Entity("LteCar.Server.Data.Car", b =>
                {
                    b.OwnsOne("LteCar.Onboard.VideoSettings", "VideoSettings", b1 =>
                        {
                            b1.Property<int>("CarId")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("Bitrate")
                                .HasColumnType("INTEGER")
                                .HasColumnName("VideoBitrate");

                            b1.Property<float?>("Brightness")
                                .HasColumnType("REAL")
                                .HasColumnName("VideoBrightness");

                            b1.Property<int?>("Framerate")
                                .HasColumnType("INTEGER")
                                .HasColumnName("VideoFramerate");

                            b1.Property<int?>("Height")
                                .HasColumnType("INTEGER")
                                .HasColumnName("VideoHeight");

                            b1.Property<int?>("Width")
                                .HasColumnType("INTEGER")
                                .HasColumnName("VideoWidth");

                            b1.HasKey("CarId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarId");
                        });

                    b.Navigation("VideoSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("LteCar.Server.Data.CarChannel", b =>
                {
                    b.HasOne("LteCar.Server.Data.Car", "Car")
                        .WithMany("Functions")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("LteCar.Server.Data.CarTelemetry", b =>
                {
                    b.HasOne("LteCar.Server.Data.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("LteCar.Server.Data.User", b =>
                {
                    b.HasOne("LteCar.Server.Data.Car", "ActiveVehicle")
                        .WithMany()
                        .HasForeignKey("ActiveVehicleId");

                    b.Navigation("ActiveVehicle");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserCarSetup", b =>
                {
                    b.HasOne("LteCar.Server.Data.Car", "Car")
                        .WithMany("UserCarSetups")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.User", "User")
                        .WithMany("CarSetups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserChannel", b =>
                {
                    b.HasOne("LteCar.Server.Data.UserChannelDevice", "UserChannelDevice")
                        .WithMany("Channels")
                        .HasForeignKey("UserChannelDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserChannelDevice");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserChannelDevice", b =>
                {
                    b.HasOne("LteCar.Server.Data.User", "User")
                        .WithMany("UserChannelDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupFunctionNodeParameter", b =>
                {
                    b.HasOne("LteCar.Server.Data.UserSetupFunctionNode", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.UserSetupFunctionNode", "UserSetupFunctionNode")
                        .WithMany("Parameters")
                        .HasForeignKey("UserSetupFunctionNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("UserSetupFunctionNode");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupLink", b =>
                {
                    b.HasOne("LteCar.Server.Data.UserSetupFlowNodeBase", "UserSetupFromNode")
                        .WithMany()
                        .HasForeignKey("UserSetupFromNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.UserSetupFlowNodeBase", "UserSetupToNode")
                        .WithMany()
                        .HasForeignKey("UserSetupToNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserSetupFromNode");

                    b.Navigation("UserSetupToNode");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupTelemetry", b =>
                {
                    b.HasOne("LteCar.Server.Data.CarTelemetry", "CarTelemetry")
                        .WithMany()
                        .HasForeignKey("CarTelemetryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.UserCarSetup", "UserSetup")
                        .WithMany()
                        .HasForeignKey("UserSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarTelemetry");

                    b.Navigation("UserSetup");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupCarChannelNode", b =>
                {
                    b.HasOne("LteCar.Server.Data.CarChannel", "CarChannel")
                        .WithMany("SetupNodes")
                        .HasForeignKey("CarChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.UserCarSetup", "UserSetup")
                        .WithMany()
                        .HasForeignKey("UserSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarChannel");

                    b.Navigation("UserSetup");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupFunctionNode", b =>
                {
                    b.HasOne("LteCar.Server.Data.UserCarSetup", "UserSetup")
                        .WithMany()
                        .HasForeignKey("UserSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSetup");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupTelemetryNode", b =>
                {
                    b.HasOne("LteCar.Server.Data.CarTelemetry", "Telemetry")
                        .WithMany()
                        .HasForeignKey("TelemetryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.UserCarSetup", "UserSetup")
                        .WithMany("TelemetryNodes")
                        .HasForeignKey("UserSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Telemetry");

                    b.Navigation("UserSetup");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupUserChannelNode", b =>
                {
                    b.HasOne("LteCar.Server.Data.UserChannel", "UserChannel")
                        .WithMany("SetupNodes")
                        .HasForeignKey("UserChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LteCar.Server.Data.UserCarSetup", "UserSetup")
                        .WithMany()
                        .HasForeignKey("UserSetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserChannel");

                    b.Navigation("UserSetup");
                });

            modelBuilder.Entity("LteCar.Server.Data.Car", b =>
                {
                    b.Navigation("Functions");

                    b.Navigation("UserCarSetups");
                });

            modelBuilder.Entity("LteCar.Server.Data.CarChannel", b =>
                {
                    b.Navigation("SetupNodes");
                });

            modelBuilder.Entity("LteCar.Server.Data.User", b =>
                {
                    b.Navigation("CarSetups");

                    b.Navigation("UserChannelDevices");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserCarSetup", b =>
                {
                    b.Navigation("TelemetryNodes");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserChannel", b =>
                {
                    b.Navigation("SetupNodes");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserChannelDevice", b =>
                {
                    b.Navigation("Channels");
                });

            modelBuilder.Entity("LteCar.Server.Data.UserSetupFunctionNode", b =>
                {
                    b.Navigation("Parameters");
                });
#pragma warning restore 612, 618
        }
    }
}
