#r "nuget: System.Text.Json"

using System;
using System.IO;
using System.Text.Json;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;

string jsonPath = Path.Combine(Directory.GetCurrentDirectory(), "Setup", "translations.json");
string designerPath = Path.Combine(Directory.GetCurrentDirectory(), "Setup", "Translations.Designer.cs");

    var json = File.ReadAllText(jsonPath);
    var translations = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, Dictionary<string, string>>>>(json);

    // Use the directory of the CSX file for paths
    string scriptDir = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) ?? Directory.GetCurrentDirectory();
    jsonPath = Path.Combine(scriptDir, "translations.json");
    designerPath = Path.Combine(scriptDir, "Translations.Designer.cs");

    var sectionClasses = translations.Keys.Select(section =>
    {
        var keys = translations[section].Keys;
        return $@"
        public class {section}Translations
        {{
            private readonly Dictionary<string, Dictionary<string, string>> _data;
            private readonly string _language;

            public {section}Translations(Dictionary<string, Dictionary<string, string>> data, string language)
            {{
                _data = data;
                _language = language;
            }}

{string.Join(Environment.NewLine, keys.Select(k => $"            public string {k} => Get(\"{k}\");"))}

            private string Get(string key)
            {{
                if (_data.TryGetValue(key, out var langDict) && langDict.TryGetValue(_language, out var value))
                    return value;
                return key;
            }}
        }}
";
    });

    var sectionProperties = translations.Keys.Select(section =>
        $"        public {section}Translations {section} => new {section}Translations(_translations[\"{section}\"], _language);"
    );

    string designerCode = $@"
// Auto-generated by Translations.csx
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

namespace Onboard.Setup
{{
    public class Translations
    {{
        private readonly Dictionary<string, Dictionary<string, Dictionary<string, string>>> _translations;
        private readonly string _language;

        public Translations(string language)
        {{
            var scriptDir = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) ?? Directory.GetCurrentDirectory();
            var jsonPath = Path.Combine(scriptDir, ""translations.json"");
            var json = File.ReadAllText(jsonPath);
            _translations = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, Dictionary<string, string>>>>(json);

            var firstSection = _translations.Values.FirstOrDefault();
            var availableLanguages = firstSection?.Values.FirstOrDefault()?.Keys;

            if (availableLanguages?.Contains(language) ?? false)
                _language = language;
            else
                _language = availableLanguages.FirstOrDefault();
        }}

{string.Join(Environment.NewLine, sectionProperties)}

{string.Join(Environment.NewLine, sectionClasses)}
    }}
}}
";
    File.WriteAllText(designerPath, designerCode);
    Console.WriteLine($"{designerPath} generated.");
