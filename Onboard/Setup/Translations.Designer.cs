
// Auto-generated by Translations.csx
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

namespace Onboard.Setup
{
    public class Translations
    {
        private static readonly Dictionary<string, Dictionary<string, Dictionary<string, string>>> _translations;
        private readonly string _language;

        static Translations()
        {
            var scriptDir = Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location) ?? Directory.GetCurrentDirectory();
            var jsonPath = Path.Combine(scriptDir, "translations.json");
            var json = File.ReadAllText(jsonPath);
            _translations = JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, Dictionary<string, string>>>>(json);
        }

        public Translations(string language)
        {
            var firstSection = _translations.Values.FirstOrDefault();
            var availableLanguages = firstSection?.Values.FirstOrDefault()?.Keys;

            if (availableLanguages?.Contains(language) ?? false)
                _language = language;
            else
                _language = availableLanguages.FirstOrDefault();
        }

        public MenuTranslations Menu => new MenuTranslations(_translations["Menu"], _language);
        public PromptsTranslations Prompts => new PromptsTranslations(_translations["Prompts"], _language);


        public class MenuTranslations
        {
            private readonly Dictionary<string, Dictionary<string, string>> _data;
            private readonly string _language;

            public MenuTranslations(Dictionary<string, Dictionary<string, string>> data, string language)
            {
                _data = data;
                _language = language;
            }

            public string SetCarName => Get("SetCarName");
            public string SetCarSecret => Get("SetCarSecret");
            public string SetServer => Get("SetServer");

            private string Get(string key)
            {
                if (_data.TryGetValue(key, out var langDict) && langDict.TryGetValue(_language, out var value))
                    return value;
                return key;
            }
        }


        public class PromptsTranslations
        {
            private readonly Dictionary<string, Dictionary<string, string>> _data;
            private readonly string _language;

            public PromptsTranslations(Dictionary<string, Dictionary<string, string>> data, string language)
            {
                _data = data;
                _language = language;
            }

            public string EnterCarName => Get("EnterCarName");
            public string EnterCarSecret => Get("EnterCarSecret");
            public string EnterServerName => Get("EnterServerName");
            public string EnterServerPort => Get("EnterServerPort");

            private string Get(string key)
            {
                if (_data.TryGetValue(key, out var langDict) && langDict.TryGetValue(_language, out var value))
                    return value;
                return key;
            }
        }

    }
}
